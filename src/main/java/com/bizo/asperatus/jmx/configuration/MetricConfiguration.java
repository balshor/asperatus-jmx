package com.bizo.asperatus.jmx.configuration;

import com.bizo.asperatus.model.Unit;

/**
 * A MetricConfiguration is a simple bean holding a description of a JMX metric and the corresponding Asperatus metric.
 * 
 * @author darren
 * 
 */
public class MetricConfiguration {
  /** JMX Object Name, eg "java.lang:type=OperatingSystem" */
  private final String objectName;

  /** JMX Attribute, eg "OpenFileDescriptorCount" */
  private final String attribute;

  /** Composite data key for attributes that are CompositeData. Should be null if the attribute is not composite data. */
  private final String compositeDataKey;

  /** CloudWatch metric name, eg "OpenFileDescriptors" */
  private final String metricName;

  /** CloudWatch unit */
  private final Unit unit;

  /** Polling frequency, in seconds. */
  private final int frequency;

  /** Comment documenting this configuraiton. */
  private final String comment;

  public MetricConfiguration(
      final String objectName,
      final String attribute,
      final String compositeDataKey,
      final String metricName,
      final Unit unit,
      final int frequency,
      final String comment) {
    this.objectName = objectName;
    this.attribute = attribute;
    this.compositeDataKey = compositeDataKey;
    this.metricName = metricName;
    this.unit = unit;
    this.frequency = frequency;
    this.comment = comment;
  }

  public String getObjectName() {
    return objectName;
  }

  public String getAttribute() {
    return attribute;
  }

  public String getCompositeDataKey() {
    return compositeDataKey;
  }

  public String getMetricName() {
    return metricName;
  }

  public Unit getUnit() {
    return unit;
  }

  public int getFrequency() {
    return frequency;
  }

  public String getComment() {
    return comment;
  }

  // autogenerated by Eclipse
  @Override
  public int hashCode() {
    final int prime = 31;
    int result = 1;
    result = prime * result + ((attribute == null) ? 0 : attribute.hashCode());
    result = prime * result + ((comment == null) ? 0 : comment.hashCode());
    result = prime * result + ((compositeDataKey == null) ? 0 : compositeDataKey.hashCode());
    result = prime * result + frequency;
    result = prime * result + ((metricName == null) ? 0 : metricName.hashCode());
    result = prime * result + ((objectName == null) ? 0 : objectName.hashCode());
    result = prime * result + ((unit == null) ? 0 : unit.hashCode());
    return result;
  }

  // autogenerated by Eclipse
  @Override
  public boolean equals(final Object obj) {
    if (this == obj) {
      return true;
    }
    if (obj == null) {
      return false;
    }
    if (getClass() != obj.getClass()) {
      return false;
    }
    final MetricConfiguration other = (MetricConfiguration) obj;
    if (attribute == null) {
      if (other.attribute != null) {
        return false;
      }
    } else if (!attribute.equals(other.attribute)) {
      return false;
    }
    if (comment == null) {
      if (other.comment != null) {
        return false;
      }
    } else if (!comment.equals(other.comment)) {
      return false;
    }
    if (compositeDataKey == null) {
      if (other.compositeDataKey != null) {
        return false;
      }
    } else if (!compositeDataKey.equals(other.compositeDataKey)) {
      return false;
    }
    if (frequency != other.frequency) {
      return false;
    }
    if (metricName == null) {
      if (other.metricName != null) {
        return false;
      }
    } else if (!metricName.equals(other.metricName)) {
      return false;
    }
    if (objectName == null) {
      if (other.objectName != null) {
        return false;
      }
    } else if (!objectName.equals(other.objectName)) {
      return false;
    }
    if (unit != other.unit) {
      return false;
    }
    return true;
  }

}
